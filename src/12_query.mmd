# Responsive Interfaces

This section shows how to use CSS _media queries_ to target a site
to more than one kind of device. You can use media queries, for
example, to make a site accessible to mobile handsets and tablet
devices in addition to desktop browsers.

Media queries offer a client-side mechanism to adapt web pages based
on a device's inherent characteristics, most commonly its screen size.
A CSS-based interface may respond by restyling or toggling the display
of content.

Prior to widespread support for media queries, the main way to adapt
an interface was for the server to respond to the _User-Agent_
header the browser transmits with each HTTP request. Server-based
adaptation fails when the information to classify each browser is
inaccurate or not up to date. (Device databases such as _WURFL_ and
_DeviceAtlas_ address this problem somewhat.)

Media queries may be most useful if you want to make a desktop-facing
website marginally more accessible on mobile handsets and tablets, but
if you want to avoid making major changes in implementation. They are
appropriate in the following cases:

- If it makes sense to deploy a set of web pages on more than one
kind of device. A game that requires tilting a handset, for example,
makes no sense within a desktop browser.

- If the overall user interface should be perceived similarly on each
device. For example, a desktop site might prompt users to access
content via hierarchical categories or search queries, while in a
mobile site a narrower range of location-specific or recently
published content might be more appropriate.

- If the basic mechanism to deploy different interfaces matches. For
example, if a desktop interface relies on conventional hyperlinks to a
shifting set of web pages, while a \l{Packaging Web Apps} {cached
mobile web app} loads data dynamically via Ajax from a fixed set of
files, the difference between the two approaches is more substantial
than the content's appearance on the screen.

If any of these are the case, a popular alternative to such hybrid
sites is to provide separate access points for each interface. For
example, a desktop site might be accessed via _www.website.com_,
while mobile variants might be available at _m.website.com_,
_touch.website.com_, or _website.mobi_. The \l{Script-based Adaptation} section shows a simpler way to use media queries: to guide
users to the most appropriate site, rather than to apply different
interfaces as in \l{Assigning Alternative Interfaces} {the following
section}.

###  Assigning Alternative Interfaces

Media _queries_ extend an older CSS specification known as _media
types_, which assigned browsers with high-level categories such as
`screen` and `handheld`, or `print` to re-style a web page's
printed output. The original set of mobile browsers were simply typed
`handheld`, and could safely be presented with far more simplified
content than `screen` content. However, the introduction of
higher-capability touch-based browsers led to a problem: their larger
screens and flexible zoom controls allowed them to display complex
page layouts. To allow access to the richer content they were able to
present, these browsers had to be described, somewhat inaccurately,
with the `screen` media type.

Media queries allow you to distinguish among various kinds of
`screen`-typed browser. Most modern touch-based browsers have 320
pixel-wide screens, which the following media query identifies:

```
screen and (max-device-width: 320px)
```

Queries can be activated in three ways:

1. as part of `<link>` tags within the HTML's `head` region. This
example targets CSS to desktop, tablet, and touch browsers, along with
lower-end legacy mobile browsers:

```
<link media="screen"
    href="/path/to/desktop.css" type="text/css" rel="stylesheet"/>
<link media="only screen and (max-device-width: 320px)"
    href="/path/to/touch.css" type="text/css" rel="stylesheet"/>
<link media="only screen and (max-device-width: 1024px)"
    href="/path/to/tablet.css" type="text/css" rel="stylesheet"/>
<link media="handheld"
    href="/path/to/mobile.css" type="text/css" rel="stylesheet"/>
```

1. as part of `@import` rules within CSS files or `<style>`
regions:

```
@import url("touch.css") screen and (max-device-width: 320px);
```

1. as part of `@media` rules, to define regions of custom style
sheets within a single CSS file or `<style>` region:

```
.sidebar { float: right; }

@media only screen and (max-device-width: 320px) {
    .sidebar { display: none }
}
```

The following example demonstrates a simple color-coded message
identifying your class of browser, which appears dynamically based on
the first approach shown above. Change the width of your desktop
browser's window to see the changes take place:

\l{x_mob_mediaquery} {\inlineimage scr_mob_mediaquery.png
}

View CSS for:
\l{x_mq_desktop_css} {desktop},
\l{x_mq_touch_css} {touch},
\l{x_mq_tablet_css} {tablet},
\l{x_mq_mobile_css} {low-end mobile}

> __NOTE__: Unlike desktop browsers, mobile browser windows can't be resized. For
the purpose of demonstration, the example above uses the `max-width`
media query, which reflects the window's current width. The
`max-device-width` media more accurately reflects a window's maximum
potential width on various devices.

The following example shows a skeletal layout that appears differently
based on the type of browser viewing it. The image below shows how it
would appear when viewed on a touch-based browser. A desktop browser
renders a more complex three-column layout. Again, change the
window's width to see the change take place:

\l{x_mob_layout} {\inlineimage scr_mob_layout.png
}

CSS for:
\l{x_mqlayout_desktop_css} {desktop},
\l{x_mqlayout_touch_css} {touch},
\l{x_mqlayout_mobile_css} {low-end mobile}

When viewed with a desktop browser, the page displays a typical
full-page layout: a main content column surrounded by navigation and
sidebar columns, with banner headers and footers that straddle the top
and bottom of the screen. When viewed with a touch-based browser, the
sidebar element does not appear. The main content extends to the full
width of the screen, while header and navigation elements share the
top of the screen. When viewed with other mobile browsers, even the
top of the screen is simplified to replace header information with a
simple icon.

###  Script-based Adaptation

Media queries allow you to assign various style sheets, but they can
also be invoked from within JavaScript, via `window.matchMedia`, to
adapt content in other ways.

The following function specifies the same set of criteria as above.
It allows applications to directly test whether they are being
accessed from browsers classified _desktop_ _tablet_, _touch_,
or low-end _mobile_:

```
function isDesign(str) {
    var design;
    if (!window.matchMedia) return(false);
    if (window.matchMedia('only screen and (max-device-width: 320px)').matches) {
        design = 'touch';
    }
    else if (window.matchMedia('only screen and (max-device-width: 1024px)').matches) {
        design = 'tablet';
    }
    else if (window.matchMedia('screen').matches) {
        design = 'desktop';
    }
    else if (window.matchMedia('handheld').matches) {
        design = 'mobile';
    }
    return(str == design);
}
```

The following example uses this technique to produce a simple message,
dynamically generated from JavaScript, that corresponds to the same
message generated via CSS:

\l{x_mob_condjs} {\inlineimage scr_mob_condjs.png
}

\l{x_mob_condjs_css} {\inlineimage icon_css.png
}\l{x_mob_condjs_js} {\inlineimage icon_js.png
}

This technique is useful, especially when deploying a hybrid site's
content over potentially low-bandwidth mobile networks. The following
example redirects references to high-resolution video files to
lower-bandwidth variants:

```
var sources = document.getElementById("video").querySelectorAll("source");
if (isDesign("touch")) {
    for (i = 0, l = sources.length; i < l ; i++ ) {
        sources[i].src = sources[i].src.replace(/hi_/, "lo_");
    }
}
```

High-bandwidth content that is appropriate for desktop browsers may
lead to poor performance on mobile browsers, and costly network
traffic. If you deploy a hybrid site using separate interfaces for
desktop and mobile browsers as described above, a sidebar element that
appears in the desktop interface may be suppressed from the mobile
interface:

```
.sidebar { display: block }
@media only screen and (max-device-width: 320px) {
    .sidebar { display: none }
}
```

In that case, it would be inefficient to load a great deal of markup
from the server that never actually displays on mobile browsers.
Instead, the full markup may load conditionally, depending on which
design is in effect:

```
<section class="sidebar"><!-- empty node --></section>

if (isDesign("desktop")) {
    $(".sidebar").load("sidebar_innerHTML.html");
}
```

Alternately, if you want to deploy a site's various interfaces via
separate access points, you can use the sort of tests described above
to prompt users if they would rather load an installable web app.

###  What Can You Find Out About a Browser?

You can use media queries to test for any of the following device
properties:

- `width`, `min-width`, `max-width`, `device-width`,
`min-device-width`, `max-device-width`: integer measurements
specify pixels, otherwise the _device_ keyword specifies the latent
width of the non-resizable window used by mobile browsers.

- `height`, `min-height`, `max-height`, `device-height`,
`min-device-height`, `max-device-height`: same as above, yet
vertical.

- `aspect-ratio`, `min-aspect-ratio`, `max-aspect-ratio`,
`device-aspect-ratio`, `min-device-aspect-ratio`,
`max-device-aspect-ratio`: accepts pairs of _width_/_height_
integers, such as `3/4`.

- `resolution`, `min-resolution`, `max-resolution`: screen
resolution expressed in dots per inch.

- `-webkit-device-pixel-ratio`, `-webkit-min-device-pixel-ratio`,
`-webkit-max-device-pixel-ratio`: the number of device screen pixels
that correspond to each CSS pixel, typically ranging from 1 for
desktop browsers to 2 for the highest-resolution mobile screens. This
information is also available from within scripts via
`window.devicePixelRatio`. (See \l{Adapting Images to Screen Resolution} for an example.)

- `color`, `min-color`, `max-color`: color depth, expressed as
the number of bits used to represent each color.

- `color-index`, `min-color-index`, `max-color-index`: number
of different colors that may display at once.

- `orientation`: either `portrait` or `landscape`. (See
\l{Tipping the Handset}.)

Webkit-based browsers may also test for the presence of high-level CSS
animation features: `(transform-2d)`, `(transform-3d)`,
`(transition)`, and `(animation)`. (To extend fucntionality to
earlier browser versions, specify `webkit` as a vendor prefix:
`(-webkit-transform-3d)`.) See \l{Animations} and \l{Transforms} for
more information on these features.

Most important remaining browser features can be tested using
JavaScript-based _object detection_. For example, the following
shows how to test support for various high-level HTML5 features:

```
var supportsLocation = !!navigator.geolocation;
var supportsVideo    = !!document.createElement("video").canPlayType;
var supportsStorage  = !!window.localStorage;
var supportsTouch    = !!document.createEvent("TouchEvent")
```

> __NOTE__: Object detection tests sometimes yield incorrect results, and should
be used with care. For example, the version of WebKit used within a
particular browser may feature latent support for touch events, but
may be deployed in a context, such as a non-tablet desktop browser, in
which the touch events never have an opportunity to fire.

\quotation

###  SIDEBAR  The Selectors API

Browser 8.5 supports several ways to access DOM elements as
alternatives to `getElementById()`. The `querySelector()` or
`querySelectorAll()` methods accept CSS selector arguments, which
allow for more flexible searches. (See \l{SIDEBAR CSS3 Selectors} for
information on available Level 3 selectors.)

For example, the following gathers unordered list items, but only when
nested within a `menu`-classed ordered list, and only when unselected:

```
var items = document.querySelectorAll('ol.menu > ul > li:not(.selected)');
```

Alternately, narrow the search scope by calling these methods on
individual elements:

```
var menu = document.querySelector('ol.menu');
var items = menu.querySelectorAll('ul > li:not(.selected)');
```

In addition, `getElementsByClassName()` allows you to search for
elements matching one or more classes:

```
var selected = document.getElementsByClassName('icon selected');
```

> __NOTE__: matchesSelector

\endquotation

##  XXX MT

If you are maintaining parallel web content for access both by mobile
browsers and larger-screen desktop and tablet browsers, you can deploy
the same set of pages, adapting the interface depending on qualities
of the browser requesting each page. Alternately, you can deploy a
different set of pages, typically featuring mobile-specific domain
names such as _m.website.com_ rather than _www.website.com_. CSS
_media queries_ allow you to target custom mobile interfaces in both
cases, or may be used as a way to prompt users to
\l{Web Apps} {install an alternative web app}.

##  Example: Present a Web Page with Different Interfaces

Placing the following within the HTML's `<HEAD>` region assigns the
CSS style sheets contained in _all.css_, and then applies additional
style sheets from _mobile.css_ only on smaller-screen mobile
browsers:

```
<link type="text/css" rel="stylesheet" media="screen" href="/css/all.css"/>
<link type="text/css" rel="stylesheet"
    media="only screen and (max-device-width: 320px)" href="/css/mobile.css"/>
```

The _all.css_ file may specify a sidebar element, which can be
suppressed in the mobile interface simply by adding a style sheet such
as the following:

```
.sidebar {display: none }
```

Note that regardless of its superficial `display` property, the
hidden content still loads.

Using media queries, you can also reference different CSS files within
an `@import` rule, or specify different interfaces within the same
set of CSS using the `@media` rule:

```
@import url("mobile.css") screen and (max-device-width: 320px);

.sidebar { border-radius: 0.5em }
@media only screen and (max-device-width: 320px) {
    .sidebar { display: none }
}
```

The following web application interactively demonstrates how various
CSS properties function and allows you to copy the results into your
own code. When viewed on a desktop browser, the interface presents a
large-screen layout:

\l{x_css3_htm} {
  \inlineimage media.png
}

When viewed with the Browser (or browsers
available on iPhone and Android devices), it presents a narrower set
of options on each screen:

\l{x_css3_htm} {
  \inlineimage media2.png
}

\l{x_css3_htm} {
    __IFRAME__
}
\l{x_css3_htm} {
    \inlineimage icon_html.png
}
\l{x_css3_css} {
    \inlineimage icon_css.png
}
\l{x_css3_js} {
    \inlineimage icon_js.png
}

To preview how the mobile interface appears, narrow the window of your
desktop browser. When the device is held upright, the main
tabbed interface displays. When \l{Tipping the Handset}
{tipped to its side}, the screen preview appears.

##  Example: Redirect to the Appropriate Interface

The example above assumes you have a single set of pages superfically
adapted with CSS for presentation on either mobile and desktop browsers.
You may prefer to deploy them separately, either to keep mobile pages
smaller or to separate each interface's development.
\l{Web Apps}
{Fixed-footprint mobile web apps} may also be implemented in a
fundamentally different manner than conventional websites, accessing
data dynamically with Ajax rather than using links to static pages or
other server-generated content.

In that case, media queries can be called from within JavaScript to
direct users to the appropriate interface. The following load script
uses `window.matchMedia` to compare the URL to the device accessing
the page, redirecting if appropriate:

```
var loc = window.location;
var query = 'only screen and (max-device-width: 320px)';
var locIsMobile = !!loc.match(/http:\/\/m.website/);
var devIsMobile = !!window.matchMedia(query).matches;
if (locIsMobile && (! devIsMobile) ) {
    window.location = window.location.replace(/http:\/\/m.website/,
        "http://www.website");
} else if (devIsMobile && (! locIsMobile) ) {
    window.location = window.location.replace(/http:\/\/www.website/,
        "http://m.website");
}
```

You can also use this approach to substitute lower-bandwidth content,
or prompt to redirect to an \l{Web Apps}
{installable web app}.
\l{Data Storage} {Client-side storage} allows you to
retain users' interface preference for future browsing sessions.

