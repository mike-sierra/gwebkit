# Editable Text

##  contenteditable

The HTML5 _contenteditable_ feature allows most any displaying text
to becomes editable in place, potentially allowing more powerful
interfaces than those that rely on form inputs to edit small portions
of content.

To enable edits for any element, specify a `contenteditable`
attribute:

```
<p contenteditable="true">edit me!</p>
```

Change the attribute to `false` or else remove it to make the
element static.  Use the `element.isContentEditable` property from
JavaScript to determine if the element is currently editable.

Editability can also be specified more generally with CSS's
`user-modify` property. This uses a `noedit` class to toggle
editability:

```
li { -webkit-user-modify: read-write }
li.noedit { -webkit-user-modify: read-only; }
```

By default, text selections can incorporate in-line formatting
changes, such as bold or italic. This alternative CSS strips such
formatting from pasted selections:

```
li { -webkit-user-modify: read-write-plaintext-only }
```

The `designMode` property provides an even higher-level alternative.
When enabled, _all_ displaying text becomes editable:

```
document.designMode = 'on';
```

Editable text elements behave much like form inputs, opening the
browser's virtual keyboard for text entry. Editable elements respond
to `focus` events when users tap to edit them, and `blur` events
when users complete their edits and tap elsewhere.  Use `input`
events as an alternative to key events to track changes to the text
that are still in progress.

> __NOTE__: Make sure pages are not crowded with so many editable elements
that users can't touch to navigate within a page without mistakenly
activating the keyboard.

This example shows an editable interface. Elements currently open for
editing are styled with the `:focus` CSS class. After edits are
complete, a `blur` handler checks whether the text is correct.

\l{x_editable_htm} {
  \inlineimage editable.png
}

\l{x_editable_htm} {
    __IFRAME__
}
\l{x_editable_htm} {
    \inlineimage icon_html.png
}
\l{x_editable_css} {
    \inlineimage icon_css.png
}
\l{x_editable_js} {
    \inlineimage icon_js.png
}

After edits are made, they may need to be stored on the device, at
least temporarily before transmitting the data to a server. See
\l{Data Storage} for options.

##  Selections

By default, users can press and hold text to select it. The selected
text is highlighted, along with handles to modify the range of the
selection, and __cut__, __copy__, and __paste__ controls where
appropriate.

> __NOTE__: Selection controls are only available within standard web pages,
not within \l{Web Apps} {full-screen web applications}.

The ability to select text can be controlled with CSS. In this
example, text selections are disabled by default, and enabled only
within paragraph elements:

```
body { -webkit-user-select: none; }
p    { -webkit-user-select: auto; }
```

> __NOTE__: It is good practice to allow only content elements to be
selected, not irrelevant interface controls such as buttons.

The dynamic `::selection` CSS class allows you to modify how the
selected range of text appears. By default, text appears inverted, but
in this example it is lightly highlighted with yellow:

```
*::selection {
    background: gold;
    color: black;
}
```

\quotation

###  SIDEBAR  The ClassList API

Browser 8.5's support for the ClassList API allows for easy
manipulation of class names, which are typically used along with CSS
to drive interfaces. This feature is typically found in third-party
JavaScript libraries. For example, the following markup:

```
<img id="ic" class="icon colleague" src="img/samantha.png"/>
```

...may be manipulated with the following API calls:

```
var img = document.querySelector('#ic');
var cl = img.classList; // "icon colleague"
cl.remove('colleague')  // "icon"
cl.add('friend')        // "icon friend"
cl.toggle('selected')   // "icon friend selected"
cl.contains('selected') // true
cl.toggle('selected')   // "icon friend"
cl.contains('selected') // false
```

\endquotation

##  Cut, Copy, and Paste

The  Browser allows users to copy text selections from web
pages into other applications, or paste selections into editable
pages.

Applications may respond to these actions by listening for `cut`,
`copy`, and `paste` events, which fire on the `window` object.
Event handlers can access the selected text using the window's
`getSelection()` method. This example places the selected text and
a shortened URL into a box that's used as a prompt:

```
window.addEventListener('copy', copyHandler);
var prompt = document.querySelector('div#share_prompt')

function copyHandler(e) {
    var url = 'http://tiny.cc/b2wdfw';
    prompt.innerHTML = window.getSelection() + " (" + url + ")";
    prompt.classList.add('visible');
};
```

In the accompaying sample interface, copying text gives users the
option to share the selection and accompanying link using a social web
service.  Otherwise they can still paste the text from the clipboard
into other applications, but without the additional link text.

\l{x_fonts_htm} {
  \inlineimage fonts2.png
}

\l{x_fonts_htm} {
    __IFRAME__
}
\l{x_fonts_htm} {
    \inlineimage icon_html.png
}
\l{x_fonts_css} {
    \inlineimage icon_css.png
}
\l{x_fonts_js} {
    \inlineimage icon_js.png
}

##  XXX EDITABLE GROB

###  >> Enabling Editable Text

###  >> Mobile Constraints

####  ooo ContentEditable

As an alternative to forms for text input, Browser 8_5 also supports
HTML5's ContentEditable feature, which allows users to edit most any
displaying text.

Setting an element's `contenteditable` attribute to `true` enables
direct editing, as does setting its `-webkit-user-modify` CSS
property to `read-write`. Setting the attribute to `false` or the
CSS to `read-only` allows a web app to control this feature. Current
state is available via `element.isContentEditable`.

Tapping within an editable region of text allows users to place an
insertion point and start typing. Like form inputs, editable text
areas respond to `focus` event handlers, and can be styled using the
`:focus` CSS selector. (However, running `element.focus()` does
not present the keyboard; that requires users to tap within the
element.)  Applications can rely on `input` event handlers to
respond to changes in the text as it is entered, or `blur` handlers
once edits are complete and users have tapped outside the
element. (See \l{Web Storage} and \l{Web SQL} for information on ways
to cache edited text locally.)

####  ooo The execCommand editing API

Browser 8_5 offers partial support for the `execCommand()`
interface, which allows applications to perform basic editing and
formatting tasks. By itself, the `contenteditable` feature allows
users to type text into editable regions. This editing API offers
options to format text and alternatives to keyboard input. This
section offers illustrative examples of editing commands.

Browser 8_5 does not support text selections within web content, so
the `selectAll` and `unselect` have no effect. As an alternative,
the example below shows how to apply in-line formatting to a text
insertion using the `insertText` command.

The `bold`, `italic`, `subscript` and `superscript` commands
toggles the state of in-line formatting at the insertion point.
Running the command is equivalent to opening or closing `<b>`,
`<i>`, `<sub>`, or `<sup>` tags while typing within a block
element.

The following example inserts text at the insertion point, surrounds
it with linebreaks, and applies italic formatting:

```
textBuffer = "This is text, perhaps copied from an element's textContent";
document.execCommand('insertLineBreak');
document.execCommand('italic');
document.execCommand('insertText', false, textBuffer);
document.execCommand('italic');
document.execCommand('insertLineBreak');
```

The second argument shown in the above `insertText` command refers
to cases in which users might be prompted for input, false for all
commands on Browser 8_5.

If the cursor is positioned within already italicized text, the
insertion would have no italic formatting. Running
`document.queryCommandState('italic')` allows applications to better
respond to the editing context.

The `insertImage` command accepts a URL argument, which it wraps
within `<img src="URL">`. Likewise the `createLink` command wraps
a URL with `<a href="URL">URL</a>`. The following function accounts
for both cases based on the URL's filename extension:

```
function insert(url) {
    var cmd;
    (url.match(/\.(png|jpe?g|gif)$/))
        ? (cmd = 'insertImage')
        : (cmd = 'createLink');
    document.execCommand(cmd, false, url);
}
```

The `unlink` command, which removes link formatting from a text
selection, is not supported on Browser 8_5.

The `delete` and `forwardDelete` commands allow you to remove one
character at a time, with no information available on the character to
be deleted. The following example shows how text deletion might be
incorporated into a gestural interface in which tipping the N9 left or
right past a certain point causes text to be deleted:

```
var timer;
var rate = 50;
// currentTilt, initialTilt derived from deviceorientation API

function delete() {
    var cmd;
    // degree variance to trigger delete:
    var tiltThreshold = 20;

    // cancel if within gestural threshold...
    if ( (currentTilt < (initialTilt + tiltThreshold) ) &&
       ( (currentTilt > (initialTilt - tiltThreshold) ) ) ) {
           clearTimeout(timer);
           return(false);
    }
    // delete if outside gestural threshold...
    else {
        if (currentTilt < initialTilt) {
            cmd = 'delete';        // tilt left
        } else {
            cmd = 'forwardDelete'; // tilt right
        }
        document.execCommand(cmd);
        // repeat this function...
        timer = setTimeout(delete, rate);
    }
}
```

> __NOTE__: Since the N9's text entry interface appears on the screen
while users edit content blocks, accessing such editing functions via
touch controls may be overly difficult. Applying a hidden gestural
text editing mode may help address this constraint. For more
information on gestural interface modes, see \l{Orientation and Motion}.

The `formatBlock` command wraps whatever block element most directly
contains the insertion point within another block element. The
following example marks text as a quoted block:

```
document.execCommand('formatBlock', false, 'blockquote')
```

The `undo` and `redo` editing commands are not supported by
Browser 8_5.

Browser 8_5 supports the `insertOrderedList`,
`insertUnorderedList`, and `insertParagraph` commands. Running
`insertParagraph` splits or inserts a new instance of the current
block element. Running `insertOrderedList` or
`insertUnorderedList` creates a list container, from which
subsequent calls to `insertParagraph` inserts new items. The
following example inserts a three-item list:

```
document.execCommand('insertParagraph');
document.execCommand('insertText', false, 'The following is a list:');
document.execCommand('insertOrderedList');
document.execCommand('insertText', false, 'This is the first item');
document.execCommand('insertParagraph');
document.execCommand('insertText', false, 'This is the second item');
document.execCommand('insertParagraph');
document.execCommand('insertText', false, 'This is the third item');
```

The `insertHTML` command allows for insertion of HTML markup
directly into editable text. The following example builds the same
three-item list as in the example above:

```
var htm = "<p>The following is a list:";
htm += "<ol>";
htm += "<li>This is the first item";
htm += "<li>This is the second item";
htm += "<li>This is the third item";
htm += '</ol>';
document.execCommand('insertHTML', false, htm);
```

As is also true for `innerHTML()`, Browser 8_5 resolves missing
closing tags and other invalid XHTML syntax wherever possible.

####  ooo Editable Text

Web development has long relied on forms to support text input. All of
the new HTML5 features discussed so far in this section represent
enhancements to this familiar form mechanism. But web apps can now rely
on HTML's _ContentEditable_ feature to make nearly any displaying
text editable, with no need for forms serving as intermediary
interface elements.

This section discusses the basic mechanism to enable edits. To
_save_ edits, they must be posted to a server, for example via Ajax
rather than a form submit transaction, or else be cached by the client
browser. See the sections on \l{Data Storage} and \l{Web SQL}
for more information on how to store changes.

There are two ways to make a text element editable:

- Set its `contenteditable` attribute to `true`. (Setting it to
`false` changes it back to static text.)

- Set its `-webkit-user-modify` CSS property to `read-write`.
(Setting it to `read-only` makes the text static.)

The CSS approach is somewhat more efficient, in part because the
markup doesn't require so many redundant attributes. Either way, you
can determine an element's current state by calling
`isContentEditable` on it.

The same mobile form-factor constraints that apply to text inputs on
forms also apply to editable text. Tapping within an editable block of
text may produce a virtual keyboard interface that takes up much of
the screen, limiting the amount of screen area that can display the
text. While text inputs are often used for short chunks of data,
editable text can be used more freely for longer blocks of text.
However, mobile users may have difficulty editing lengthy text that's
not all visible on the same screen. Some browsers may also allow only
an insertion point where the user tapped rather than the ability to
select and delete longer stretches of text, a limitation that becomes
more apparent the longer the text becomes.

Mobile interfaces should also visually clarify any distinction between
editable and non-editable text, otherwise users are likely to become
frustrated at their inability to select static blocks of text for
editing. Alternately, filling a screen with a great deal of editable
content may result in the opposite problem. Users who are simply
trying to pan within a page may become frustrated when touching the
screen suddenly results in a text input interface. In these cases, it
may be best to require users to enter a dedicated text-editing
_mode_ accessible via a smaller control.

The following sample demonstrates an interface featuring items marked
as editable:

\l{x_form_editable} {\inlineimage scr_form_editable.png
}

\l{x_form_editable_css} {\inlineimage icon_css.png
}\l{x_form_editable_js} {\inlineimage icon_js.png
}

Once a text field is editable, it can receive focus and be styled with
CSS3's `:focus` selector. (See the section on \sub{Form Element State}
selectors.)  Each editable field features a corresponding `blur`
event listener that activates once a set of edits has been completed,
either by exiting the virtual keyboard or by tapping outside the
field. At that point, edits are saved within the browser's local
storage cache. The most recent set of edits are reintroduced into the
page each time it loads, and there is an option to clear them all.
(See the section on \l{Data Storage} for more information.)

> __NOTE__: Editable elements may require explicit touch input to
activate, rather than setting focus from JavaScript, which provides no
information on where to place the cursor.

- contenteditable (attr & CSS)

- designMode

- execCommand

- formatting

- (selections)

- (copy/paste)

- (clipboard)

- (undo manager)

##  XXX 8.5 ContentEditable

As an alternative to forms for text input, Browser 8_5 also supports
HTML5's ContentEditable feature, which allows users to edit most any
displaying text.

Setting an element's `contenteditable` attribute to `true` enables
direct editing, as does setting its `-webkit-user-modify` CSS
property to `read-write`. Setting the attribute to `false` or the
CSS to `read-only` allows a web app to control this feature. Current
state is available via `element.isContentEditable`.

Tapping within an editable region of text allows users to place an
insertion point and start typing. Like form inputs, editable text
areas respond to `focus` event handlers, and can be styled using the
`:focus` CSS selector. (However, running `element.focus()` does
not present the keyboard; that requires users to tap within the
element.)  Applications can rely on `input` event handlers to
respond to changes in the text as it is entered, or `blur` handlers
once edits are complete and users have tapped outside the
element. (See \l{Web Storage} and \l{Web SQL} for information on ways
to cache edited text locally.)

####  ooo The execCommand editing API

Browser 8_5 offers partial support for the `execCommand()`
interface, which allows applications to perform basic editing and
formatting tasks. By itself, the `contenteditable` feature allows
users to type text into editable regions. This editing API offers
options to format text and alternatives to keyboard input. This
section offers illustrative examples of editing commands.

Browser 8_5 does not support text selections within web content, so
the `selectAll` and `unselect` have no effect. As an alternative,
the example below shows how to apply in-line formatting to a text
insertion using the `insertText` command.

The `bold`, `italic`, `subscript` and `superscript` commands
toggles the state of in-line formatting at the insertion point.
Running the command is equivalent to opening or closing `<b>`,
`<i>`, `<sub>`, or `<sup>` tags while typing within a block
element.

The following example inserts text at the insertion point, surrounds
it with linebreaks, and applies italic formatting:

```
textBuffer = "This is text, perhaps copied from an element's textContent";
document.execCommand('insertLineBreak');
document.execCommand('italic');
document.execCommand('insertText', false, textBuffer);
document.execCommand('italic');
document.execCommand('insertLineBreak');
```

The second argument shown in the above `insertText` command refers
to cases in which users might be prompted for input, false for all
commands on Browser 8_5.

If the cursor is positioned within already italicized text, the
insertion would have no italic formatting. Running
`document.queryCommandState('italic')` allows applications to better
respond to the editing context.

The `insertImage` command accepts a URL argument, which it wraps
within `<img src="URL">`. Likewise the `createLink` command wraps
a URL with `<a href="URL">URL</a>`. The following function accounts
for both cases based on the URL's filename extension:

```
function insert(url) {
    var cmd;
    (url.match(/\.(png|jpe?g|gif)$/))
        ? (cmd = 'insertImage')
        : (cmd = 'createLink');
    document.execCommand(cmd, false, url);
}
```

The `unlink` command, which removes link formatting from a text
selection, is not supported on Browser 8_5.

The `delete` and `forwardDelete` commands allow you to remove one
character at a time, with no information available on the character to
be deleted. The following example shows how text deletion might be
incorporated into a gestural interface in which tipping the N9 left or
right past a certain point causes text to be deleted:

```
var timer;
var rate = 50;
// currentTilt, initialTilt derived from deviceorientation API

function delete() {
    var cmd;
    // degree variance to trigger delete:
    var tiltThreshold = 20;

    // cancel if within gestural threshold...
    if ( (currentTilt < (initialTilt + tiltThreshold) ) &&
       ( (currentTilt > (initialTilt - tiltThreshold) ) ) ) {
           clearTimeout(timer);
           return(false);
    }
    // delete if outside gestural threshold...
    else {
        if (currentTilt < initialTilt) {
            cmd = 'delete';        // tilt left
        } else {
            cmd = 'forwardDelete'; // tilt right
        }
        document.execCommand(cmd);
        // repeat this function...
        timer = setTimeout(delete, rate);
    }
}
```

> __NOTE__: Since the N9's text entry interface appears on the screen
while users edit content blocks, accessing such editing functions via
touch controls may be overly difficult. Applying a hidden gestural
text editing mode may help address this constraint. For more
information on gestural interface modes, see \l{Orientation and Motion}.

The `formatBlock` command wraps whatever block element most directly
contains the insertion point within another block element. The
following example marks text as a quoted block:

```
document.execCommand('formatBlock', false, 'blockquote')
```

The `undo` and `redo` editing commands are not supported by
Browser 8_5.

Browser 8_5 supports the `insertOrderedList`,
`insertUnorderedList`, and `insertParagraph` commands. Running
`insertParagraph` splits or inserts a new instance of the current
block element. Running `insertOrderedList` or
`insertUnorderedList` creates a list container, from which
subsequent calls to `insertParagraph` inserts new items. The
following example inserts a three-item list:

```
document.execCommand('insertParagraph');
document.execCommand('insertText', false, 'The following is a list:');
document.execCommand('insertOrderedList');
document.execCommand('insertText', false, 'This is the first item');
document.execCommand('insertParagraph');
document.execCommand('insertText', false, 'This is the second item');
document.execCommand('insertParagraph');
document.execCommand('insertText', false, 'This is the third item');
```

The `insertHTML` command allows for insertion of HTML markup
directly into editable text. The following example builds the same
three-item list as in the example above:

```
var htm = "<p>The following is a list:";
htm += "<ol>";
htm += "<li>This is the first item";
htm += "<li>This is the second item";
htm += "<li>This is the third item";
htm += '</ol>';
document.execCommand('insertHTML', false, htm);
```

As is also true for `innerHTML()`, Browser 8_5 resolves missing
closing tags and other invalid XHTML syntax wherever possible.

####  ooo Editable Text

Web development has long relied on forms to support text input. All of
the new HTML5 features discussed so far in this section represent
enhancements to this familiar form mechanism. But web apps can now rely
on HTML's _ContentEditable_ feature to make nearly any displaying
text editable, with no need for forms serving as intermediary
interface elements.

This section discusses the basic mechanism to enable edits. To
_save_ edits, they must be posted to a server, for example via Ajax
rather than a form submit transaction, or else be cached by the client
browser. See the sections on \l{Data Storage} and \l{Web SQL}
for more information on how to store changes.

There are two ways to make a text element editable:

- Set its `contenteditable` attribute to `true`. (Setting it to
`false` changes it back to static text.)

- Set its `-webkit-user-modify` CSS property to `read-write`.
(Setting it to `read-only` makes the text static.)

The CSS approach is somewhat more efficient, in part because the
markup doesn't require so many redundant attributes. Either way, you
can determine an element's current state by calling
`isContentEditable` on it.

The same mobile form-factor constraints that apply to text inputs on
forms also apply to editable text. Tapping within an editable block of
text may produce a virtual keyboard interface that takes up much of
the screen, limiting the amount of screen area that can display the
text. While text inputs are often used for short chunks of data,
editable text can be used more freely for longer blocks of text.
However, mobile users may have difficulty editing lengthy text that's
not all visible on the same screen. Some browsers may also allow only
an insertion point where the user tapped rather than the ability to
select and delete longer stretches of text, a limitation that becomes
more apparent the longer the text becomes.

Mobile interfaces should also visually clarify any distinction between
editable and non-editable text, otherwise users are likely to become
frustrated at their inability to select static blocks of text for
editing. Alternately, filling a screen with a great deal of editable
content may result in the opposite problem. Users who are simply
trying to pan within a page may become frustrated when touching the
screen suddenly results in a text input interface. In these cases, it
may be best to require users to enter a dedicated text-editing
_mode_ accessible via a smaller control.

The following sample demonstrates an interface featuring items marked
as editable:

\l{x_form_editable} {\inlineimage scr_form_editable.png
}

\l{x_form_editable_css} {\inlineimage icon_css.png
}\l{x_form_editable_js} {\inlineimage icon_js.png
}

Once a text field is editable, it can receive focus and be styled with
CSS3's `:focus` selector. (See the section on \sub{Form Element State}
selectors.)  Each editable field features a corresponding `blur`
event listener that activates once a set of edits has been completed,
either by exiting the virtual keyboard or by tapping outside the
field. At that point, edits are saved within the browser's local
storage cache. The most recent set of edits are reintroduced into the
page each time it loads, and there is an option to clear them all.
(See the section on \l{Data Storage} for more information.)

> __NOTE__: Editable elements may require explicit touch input to
activate, rather than setting focus from JavaScript, which provides no
information on where to place the cursor.

- contenteditable (attr & CSS)

- designMode

- execCommand

- formatting

- (selections)

- (copy/paste)

- (clipboard)

- (undo manager)

