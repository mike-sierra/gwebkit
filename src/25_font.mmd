# Typography

This section shows Lever 3 CSS features that enhance the appearance of
text.

###  Server-Based Fonts

Past web design has been limited to a narrow set of standard fonts
built into the browser application. Level 3 CSS offers the ability to
specify your own font files. Specify your own `font-family`
identifier, then assign those identifiers to external font files using
the `@font-face` rule:

```
body {
    font-family : Body, sans-serif;
}
h1,h2,h3,h4 {
    font-family : Heading, sans-serif;
}
@font-face {
    font-family: Heading;
    src: url(/fonts/text-bold.ttf)
}
@font-face {
    font-family: Body;
    src: url(/fonts/text.ttf)
}
@font-face {
    font-family: Pullquote;
    src: url(/fonts/script.ttf)
}
```

> __NOTE__: TrueType is the most widely supported font file format. Still, the
example above specifies `sans-serif` as a standard fallback font for
any browser that don't support `@font-face`.

The following example displays custom server-based fonts:

\l{x_css3_text-font} {\inlineimage scr_css3_text-font.png
}

\l{x_css3_text-font_css} {\inlineimage icon_css.png
}

###  Text Shadows

You can apply shadows to text elements using much the same syntax as
for \l{Shadows} {shadows applied to blocks}. As the following example
shows, text shadows may interfere with the legibility of text on the
mobile screen, and are most appropriate for large, sans-serif display
headings:

\l{x_css3_text-shadow} {\inlineimage scr_css3_text-shadow.png
}

\l{x_css3_text-shadow_css} {\inlineimage icon_css.png
}

In addition to the shadow's color, the property accepts two
measurements to represent its offset from the text, while the third
specifies the extent to which the shadow is blurred:

```
h1,h2,h3,h4 { text-shadow : 0.20em 0.20em 0.20em #aaaaaa; }
```

> __NOTE__: Unlike box shadows, you cannot apply a fourth measurement to spread
the shadow beyond the underlying text.

As with box shadows, you can specify numerous comma-separated text
shadow values. Embossing effects may help keep text legible against a
background whose color may vary. The following example specifies two
shadows that contrast each other:

```
text-shadow : 0.05em 0.05em #dddddd, 0.1em 0.1em #777777;
```

\l{x_css3_text-shadowMulti} {\inlineimage scr_css3_text-shadowMulti.png
}

\l{x_css3_text-shadowMulti_css} {\inlineimage icon_css.png
}

The following interactive utility helps you build individual text
shadow effects along with several font families:

\l{x_utilShadow} {\inlineimage utilShadow.png
}

###  Text Stroke

The text stroke feature enable outlining effects along the edges of
text. Unlike \l{Text Shadows} {text shadows}, text strokes affect the
interior of the letterforms. Like text shadows, this effect is most
suitable for larger display type or for subtle animations:

In the following example, `-webkit-text-fill-color` is synonymous
with the standard `color` property:

```
-webkit-text-stroke-color : #000000;
-webkit-text-stroke-width : 1px;
-webkit-text-fill-color   : #206ead;
```

\l{x_css3_text-stroke} {\inlineimage scr_css3_text-stroke.png
}

\l{x_css3_text-stroke_css} {\inlineimage icon_css.png
}

\omit

- alignment-adjust
- alignment-baseline
- baseline-shift
- dominant-baseline
- drop-initial-after-adjust
- drop-initial-after-align
- drop-initial-before-adjust
- drop-initial-before-align
- drop-initial-size
- drop-initial-value
- font-size-adjust
- font-stretch
- hanging-punctuation
- inline-box-align
- kerning-mode
- kerning-pair-threshold
- letter-spacing
- line-break
- line-stacking
- line-stacking-shift
- line-stacking-strategy
- max-font-size
- min-font-size
- punctuation-trim
- text-align-last
- text-height
- text-indent
- text-wrap
- white-space-collapsing
- word-break
- word-break-inside
- word-spacing
- wrap-option

\endomit

##  XXX MT Fonts

Web designers have long been limited to a small, core group of fonts
distributed by browser vendors. The Browser supports the CSS
`@font-face` rule, which allows you to reference any fonts you wish.

Place custom font files on your server, then add a `@font-face` rule
to a CSS region specifying a new `font-family` name, making sure it
doesn't conflict with standard font names:

```
@font-face {
    font-family: BodyText;
    src: url(fonts/customFont.ttf);
}
```

The Browser supports the TrueType (_.ttf_) font format.

Reference the family name as you ordinarily would.  It is a good idea
to also specify standard font family names as a fallback for any
browser that doesn't support custom fonts:

```
article {
    font-family: BodyText, Ariel, sans-serif;
}
```

This example shows an interface that displays custom fonts:

\l{x_fonts_htm} {
  \inlineimage fonts.png
}

\l{x_fonts_htm} {
    __IFRAME__
}
\l{x_fonts_htm} {
    \inlineimage icon_html.png
}
\l{x_fonts_css} {
    \inlineimage icon_css.png
}
\l{x_fonts_js} {
    \inlineimage icon_js.png
}

Note that font files typically do not specify variations such as bold
and italic, so these need to be assigned separately. In the example
above, the `<em>` tag is reassigned to a bold font, overriding its
default appearance as italic:

```
@font-face {
    font-family: Emphasis;
    src: url(fonts/customFontBold.ttf);
}
em {
    font-family: Emphasis;
}
```

Alternately, you can specify the same family name within different
`@font-face` rules, along with other criteria to assign specific
font files. This example assigns an additional light font when the
`font-weight` property falls below a specified numeric threshold:

```
@font-face {
    font-family: BodyText;
    src: url(fonts/customFont.ttf);
    font-weight: normal;
}
@font-face {
    font-family: BodyText;
    src: url(fonts/customFontBold.ttf);
    font-weight: 600;
}
@font-face {
    font-family: BodyText;
    src: url(fonts/customFontLight.ttf);
    font-weight: 300;
}

em {
    font-family: BodyText;
    font-weight: 600;
}
em.light {
    font-family: BodyText;
    font-weight: 200;
}
```

