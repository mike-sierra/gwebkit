# Offline Mode

Web apps can respond differently when there is no network connection
available to access other data from the web. This information is
available from the window's `online` and `offline` events, and can
be checked at any time by testing the value of `navigator.onLine`.

The example below presents a map when the user requests it, but only
if the necessary external mapping API is accessible:

```
if (! navigator.onLine) {
    alert('Sorry, no network connection. Cannot show map. Try again later?');
    return(false);
}
```

\l{x_location_htm} {
  \inlineimage location1.png
  \inlineimage location2.png
}

\l{x_location_htm} {
    __IFRAME__
}
\l{x_location_htm} {
    \inlineimage icon_html.png
}
\l{x_location_css} {
    \inlineimage icon_css.png
}
\l{x_location_js} {
    \inlineimage icon_js.png
}

The application responds similarly if the network connection stops
while the map displays:

```
var later;
var e = "Sorry, no connection, so can't show map. Inform you once it's back?"
window.addEventListener('offline', function(e){
    var m = document.getElementById('map')
    if ( ! m.classList.contains('active')) return (false);
    later = confirm(e);
    m.classList.remove('active');
});
window.addEventListener('online', function(e){
    var m = document.getElementById('map')
    if (later) && confirm('Network is back up. Show the map?') {
        m.classList.add('active');
    }
});
```

> __NOTE__: Web apps can respond to the presence of a network connection,
but not to its quality or its type.

##  XXX G

####  ooo Offline Applications

While the application cache allows a web app to execute independently
of the server from which it was downloaded, _offline mode_ allows
web apps to respond to overall network availability via the boolean
`navigator.onLine` attribute. (Browser 8.5 does not support
corresponding `online` or `offline` window events.)  Note that
this feature detects presence of a network connection, but not its
speed or quality.

####  ooo Responding to Network Availability

Once an application is cached on the browser, it can operate
independently of the site that provided it. If the application relies
on no network resources, it can operate seamlessly in __offline__
mode, with no network connection available. Since most useful
applications depend on networked APIs, web applications need a way to
respond to changes in network availability.

To check for changes in network state as they occur, assign `online`
and `offline` event handlers to the `window` object. Otherwise, at
any point you can check the value of the boolean
`window.navigator.onLine` attribute. (Note the mixed-case attribute
name.)

> __NOTE__: Applications can respond to the presence of a network
connection, but not to the quality of that connection. You cannot use
online/offline mode to make an application behave differently at
different connection speeds.

The following sample shows how an application might respond to a lack
of a network connection. By default, pressing the map icon presents a
separate map interface that relies on network-based data. Users are
prevented from initially accessing this interface if the value of
`window.navigator.onLine` is false. Thereafter, if the window
receives the `offline` event, the panel disappears along with an
error message. When the network connection is restored as signaled by
an `online` event, the user is prompted to return to the map
interface.

\l{x_storage_offline} {\inlineimage scr_storage_offline.png
}

\l{x_storage_offline_css} {\inlineimage icon_css.png
}
\l{x_storage_offline_js} {\inlineimage icon_js.png
}

####  ooo Updating the Application Cache

After an application is cached, the browser uses the locally cached
files regardless of whether the server's files change. Only when the
contents of the manifest file change does the browser update the
cached files. (Simply touching the manifest is not sufficient to force
the browser to update the cache.) The examples in the
\l{The Application Cache} feature a version number embedded within the
manifest as a comment, which when incremented updates the browser's
cache. Files are re-cached whether they have been changed or not, and
you can't limit an update to a subset of files.

> __NOTE__: The web server must identify manifest files as MIME type
`text/cache-manifest`. You may need to reconfigure your server so
that manifest files are not cacheable using `Expires` and
`Cache-Control` HTTP headers. Disabling HTTP caching for manifest
files prevents delays when updating applications based on the modified
manifest.

If the update is successful, the browser swaps in the new set of files
and displays them when pages are refreshed. Otherwise if download
fails for the manifest or for any of the component files, the entire
update fails and the browser relies on the already cached version.

Regardless of changes to the manifest, updates can also be initiated
at any time from the client browser. Testing the presence of the
`window.applicationCache` object checks the browser's support for
the feature:

```
if ( window.applicationCache ) {
    cache = window.applicationCache;
    if (cache.status == cache.UPDATEREADY) cache.update();
}
```

Possible application cache status values are:

- __0__ UNCACHED

- __1__ IDLE

- __2__ CHECKING

- __3__ DOWNLOADING

- __4__ UPDATEREADY

- __5__ OBSOLETE

The `update()` method throws an `INVALID_STATE_ERR` exception if
there is no application cache to update, or if its status is
`OBSOLETE`. Users can be informed of this change in status via the
`error` event:

```
window.applicationCache.addEventListener("error", function() {
    // error handling code
}, false);
```

Once the update succeeds, you need to run the `swapCache()` method
as part of an `updateready` event listener. (It is not available as
a callback.)

```
window.applicationCache.addEventListener("updateready", function() {
    window.applicationCache.swapCache()
}, false);
```

The `swapcache()` method throws an `INVALID_STATE_ERR` exception
if any of a number of problems occur. Otherwise when the cache state
returns to `UPDATEREADY`, the new cache is in place.

The `ApplicationCache` API supports the following events:

- `checking` occurs when the browser is trying to initially
download the manifest.

- `noupdate` occurs when no change is detected in the manifest.

- `obsolete` occurs when the manifest becomes a 404 or 410 page,
which deletes the application cache.

- `downloading` occurs when the browser starts to download
a manifest's files.

- `progress` occurs as manifest files are being downloaded.

- `error` occurs either when any file specified by the manifest
fails to download, or when the manifest is a 404 or 410 page.

- `updateready` occurs when the manifest's files have been
successfully downloaded, and are available to establish in the cache
with `swapCache()`.

- `cached` occurs after downloaded files have been successfully
cached.

__See Also:__

- [W3C: HTML5 Offline Web
applications](http://www.w3.org/TR/html5/offline.html)

####  ooo Storing Applications

\l{x_storage_appcache} {\inlineimage scr_storage_appcache.png
}

\l{x_storage_appcache_manifest} {(View manifest file)}

- events

- navigator.onLine

- (navigator.connection)

- appcache API

- cache events

- progress tracker

- (dataCache API)

