# Colors and Backgrounds

This section shows how to take advantage of Level 3 CSS color
definitions and visual effects supported by WebKit-based browsers. It
shows ways to enhance interfaces with background images, and to target
images to high-resolution handsets.

###  Color and Opacity

Color models specified by Level 3 CSS make it much easier to
incorporate layered transparency effects into screen layouts. The
opacity of an element's `background-color`, `color`, and other
color specifications can be manipulated independently of each other,
and all are independent of the element's overall `opacity`. In
addition, the HSL color model serves as an alternative to RGB. Here is
how the newer color models work:

- __HSL__. Colors defined with the HSL model specify the _hue_
as a radial or degree coordinate, then its _saturation_ and
_luminance_ as percentages. The following example specifies red and
green values:

```
background: hsl(0  , 100%, 60%);
background: hsl(128, 75% , 33%);
```

- __HSLA__. Same as HSL, but specifying an additional decimal
_alpha_ value that determines opacity. The following specifies a
fully opaque red, followed by a partial transparency:

```
background: hsla(0, 100%, 60%, 1.0);
background: hsla(0, 100%, 60%, 0.5);
```

- __RGBA__. Same as RGB, but an additional decimal _alpha_ value
specifies opacity. The following shows the same transition from opaque
to transparent as above:

```
background: rgba(100%, 0%, 0%, 1.0);
background: rgba(100%, 0%, 0%, 0.5);
```

With the addition of opacity to color definitions, you can now also
specify `transparent` as a color name.

The following full-screen interactive utility helps you build your own
RGBA and HSLA color values, and view their opacity against a
background image. It displays each color along with the CSS code
necessary to reproduce it:

\l{x_utilColor} {\inlineimage utilColor.png
}

> __NOTE__: As the utility shows, manipulating each background color's alpha
channel has no effect on the appearance of foreground text, but each
element's `opacity` does. Opacity is cumulative: setting both the
background color and the overall opacity to .5 results in a
background color of .25.

###  Gradients

Gradients provide a graduated shading effect that can add subtle
texture to background elements, and can provide screen controls a
beveled, three-dimensional appearance. Support for gradients means no
more need to use repeating background images to achieve the same
effect.

Specify gradients anywhere you use a background image:

```
background-image: #aaaaaa;
background-image: -webkit-gradient(linear, center top, center bottom,
                    from(#dddddd), to(#777777) );
```

> __NOTE__: In the example above, the first line serves as a fallback for browsers
that don't support WebKit gradients.

The gradient function's first argument identifies it as `linear`.
The following two arguments position the gradient's start and end
points from the `center top` to the `center bottom` of the
element, which corresponds in x/y terms to `50% 0%` and `50%
100%`. (Fixed units also apply.) The `from` and `to` arguments
specify a color shift, in this case from a light to a darker gray. If
the start and end points are offset from the edge of the element,
these color values fill the remaining space.

The following example shows how this gradient can be applied to a
background element that provides a visual hint for the user's progress
through a page:

\l{x_css3_gradientBack} {\inlineimage scr_css3_gradientBack.png
}

\l{x_css3_gradientBack_css} {\inlineimage icon_css.png
}

You can specify more than one gradient for the same element. The
following shifts from a dark to a light gray halfway down the element,
then back to dark:

```
background-image: -webkit-gradient(linear, center top, center bottom,
                    from(#777777), color-stop(50%, #dddddd), to(#777777) );
```

Here is how the additional `color-stop` appears when applied to the
same background element:

\l{x_css3_gradientBackStop} {\inlineimage scr_css3_gradientBackStop.png
}

\l{x_css3_gradientBackStop_css} {\inlineimage icon_css.png
}

Gradients can provide a textured, three-dimensional appearance for
buttons. In the following example, pressing a button inverts and
darkens its gradient:

\l{x_css3_gradientButton} {\inlineimage scr_css3_gradientButton.png
}

\l{x_css3_gradientButton_css} {\inlineimage icon_css.png
}

The following interactive utility helps you build your own linear
gradient effects, with any specified transparencies visible against a
background image. The sample gradient includes a single
`color-stop`, which you can position anywhere between the gradient's
`start` and `end` points:

\l{x_utilGradientLinear} {\inlineimage utilGradientLinear.png
}

Linear gradients progress across an element, but _radial_ gradients
emanate from a single point. The following example demonstrates a
colorful radial gradient used to mark where users touch the screen:

\l{x_css3_grad-radial} {\inlineimage scr_css3_grad-radial.png
}

\l{x_css3_grad-radial_css} {\inlineimage icon_css.png
}
\l{x_css3_grad-radial_js} {\inlineimage icon_js.png
}

The syntax is slightly different than for linear gradients. The first
two comma-separated arguments after the `radial` statement specify
the pair of coordinates of the inner circle, and its radius. The next
two arguments specify the coordinates and radius of the outer circle.
(The `from`, `to`, and `color-stop` syntax elements are the same
as for linear gradients.)

```
background-image: -webkit-gradient(radial, 90 120, 5, 100 130, 48,
                    from(#777777), color-stop(50%, #dddddd), to(#777777) );
```

The following interactive utility helps you build your own radial
gradient effects:

\l{x_utilGradientRadial} {\inlineimage utilGradientRadial.png
}

###  Masks

Masks offer a way to modify an image by overlaying either a gradient
or another image. The following example shows a series of thumbnail
images that, until selected, appear faded along their bottom edges due
to the linear gradient that has been applied:

```
-webkit-mask-box-image : -webkit-gradient(linear, left top, left
   bottom, from(rgba(0, 0, 0, 1)), to(rgba(0, 0, 0, 0)));
```

\l{x_css3_mask-grad} {\inlineimage scr_css3_mask-grad.png
}

\l{x_css3_mask-grad_css} {\inlineimage icon_css.png
}
\l{x_css3_mask-grad_js} {\inlineimage icon_js.png
}

The following example demonstrates an image used as a mask to frame
another image:

\l{x_css3_mask-img} {\inlineimage scr_css3_mask-img.png
}

\l{x_css3_mask-img_css} {\inlineimage icon_css.png
}

Separately, the component images look like this:

\image mask0.png
\image mask1.png

The syntax is the same for \l{Border Images} {border images}, allowing
you to `stretch` one image over the other:

```
-webkit-mask-box-image : url(img/mask.png) 5% stretch;
```

###  Reflections

Reflections offer a mirror-like effect which, in the following
example, adds a sense of weight to headings and images:

\l{x_css3_reflect} {\inlineimage scr_css3_reflect.png
}

\l{x_css3_reflect_css} {\inlineimage icon_css.png
}

The property's syntax specifies the edge of the element at which to
reflect, the offset, and an overlay color. In this case, the color is
a linear gradient that causes the reflection to gradually fade:

```
-webkit-box-reflect : below -0.25em -webkit-gradient(linear, center
            top, center bottom, from(transparent), color-stop(0.25,
            transparent), to(black));
```

###  Backgrounds

Level 3 CSS allows elements to specify more than one background image,
and enables greater flexibility over their size and position.

The following example shows an accordion-style tabbed interface. In
their default collapsed state, tabs display a single background icon
image, but when selected feature an additional \l{Gradients} {gradient
image} in the background. Specifications for each are separated with
commas:

```
background-image    : url(img/icon_head-expanded_x13.png),
    -webkit-gradient(linear, 50% 0%, 50% 100%, from(#777777), to(#eeeeee));
background-position : 12px 12px, 0 0;
background-repeat   : no-repeat;
```

\l{x_css3_backgrounds} {\inlineimage scr_css3_backgrounds.png
}

\l{x_css3_backgrounds_css} {\inlineimage icon_css.png
}
\l{x_css3_backgrounds_js} {\inlineimage icon_js.png
}

> __NOTE__: In addition to gradients, backgrounds may reference SVGs via URL.

In the example above, the icon image is offset by 12 pixels, while the
gradient is alignd with the edge of the element. Offsets can be used
to produce creative visual effects, such as the following modified
example in which \l{Animations} {animated icons} slide in and out of
view:

```
dt {
    background-image    : url(img/icon_head-collapsed_x13.png),
                          url(img/icon_head-expanded_x13.png);
    background-repeat   : no-repeat;
    background-position : 12px 12px, 12px -12px;
    -webkit-transition  : background-position 0.5s;
}
dt.selected {
    background-position : -12px 12px, 12px 12px;
}
```

\l{x_css3_backgrounds_pos} {\inlineimage scr_css3_backgrounds_pos.png
}

\l{x_css3_backgrounds_pos_css} {\inlineimage icon_css.png
}

The following shows the various properties available for each
background image:

- `background-size` allows you to customize the size of the image
to fit the element within which it appears. It accepts three
keywords:

- `auto` maintains the original size of the image.

- `contain` resizes the image as large as possible so that it fully
displays within the containing element, while keeping its aspect ratio
intact.

- `cover` resizes the image to fill the element completely,
clipping an edge from the image if necessary.

You can also supply percentage arguments for X/Y dimensions. For
example, `100% 100%` snaps the image to the exact dimensions of the
containing element, distorting the image's aspect ratio if necessary.
You can also specify fixed measurements such as pixels.

- `background-position` specifies where within the element the
image is to appear. It accepts up to two percentage measurements for
X/Y position. You can substitute keywords `top` and `left` (0%),
`bottom` and `right` (100%), as well as `center` (50%). You can
also specify fixed measurents such as pixels, or any kind of negative
measurement to bleed the image outside the containing element.

- `background-origin` specifies the portion of the element from
which to calculate position, either the outer `border-box`, the
`padding-box`, or the innermost `content-box`.

- `background-clip` specifies the portion of the element within
which to display, either the outer `border-box`, the
`padding-box`, or the innermost `content-box`. Thus if the image
originates in the `border-box` but displays in the `content-box`,
its top and left edges may be clipped.

- `background-repeat` specifies whether to display the image once
or to tile images repeatedly along any axis. Values include
`repeat`, `repeat-x`, `repeat-y`, or `no-repeat`. While this
property pre-dates Level 3 CSS, note that it can be applied separately
to more than one background image using comma-separated values as
described above.

The following interactive utility shows how all these properties
interact within an element with generous border and padding widths.

\l{x_utilBackground} {\inlineimage utilBackground.png
}

> __NOTE__: Mobile browsers may not support `background-attachment:fixed`, which
would ordinarily assign a background image to a fixed portion of the
screen so that it doesn't scroll along with other content. See
\l{Flexible Positioning} for information on the more useful
`position:fixed` property.

\quotation

###  SIDEBAR Positional Selectors

Various dynamic classes allow you to style elements depending on their
position with a series of elements: either elements of the same type,
or other child elements of the same parent. The following example
aligns a series of icons to a grid:

\l{x_css3_sel-nth} {\inlineimage scr_css3_sel-nth.png
}

\l{x_css3_sel-nth_css} {\inlineimage icon_css.png
}

Columns are specified with the `:nth-of-type()` selector, which
accepts numeric expressions as arguments. The following selectors
refer to every fourth `img` element, but offset by a specified
number:

```
img                   { position: absolute }
img:nth-of-type(4n-3) { left: 2% }
img:nth-of-type(4n-2) { left: 27% }
img:nth-of-type(4n-1) { left: 52% }
img:nth-of-type(4n-0) { left: 77% }
```

Alternately, keywords `odd` and `even` correspond to `2n-1` and
`2n` expressions. These are useful, for example, when styling table
rows with alternating background colors.

Rows are represented as the number of the element within the series,
plus a fixed number. In this case, each selector redefines the
previous selector's upper range of values:

```
img:nth-of-type(n)    { top: 5% }
img:nth-of-type(n+5)  { top: 20% }
img:nth-of-type(n+9)  { top: 35% }
img:nth-of-type(n+13) { top: 50% }
img:nth-of-type(n+17) { top: 65% }
img:nth-of-type(n+21) { top: 80% }
```

Level 3 CSS defines the following positional selectors:

- `:first-child`, `:last-child`, and `:only-child` refer to the
first or last child element within a series, or when it is the only
one.

- `:first-of-type`, `:last-of-type`, and `:only-of-type` refer
to the first or last specified element within a series, or when it is
the only one.

- `:nth-first-child()` and `:nth-last-child()` refer to the
specified child element positioned from the start or end of the
series.

- `:nth-first-of-type()` and `:nth-last-of-type()` refer to the
specified element positioned from the start or end of the series.

- `:nth-of-type()` refers to any series of specified elements.

- `:nth-child()` refers to any series of child elements.

\endquotation

###  Adapting Images to Screen Resolution

Mobile browsers operate on handsets with increasingly high-resolution
screens. By default, these screens would render images far too small.
There is also significant variation among handsets as screen
resolutions increase. To compensate, browsers use a separate grid of
_CSS pixels_ to calculate measurements. This lower-resolution grid
undergoes a translation to each handset's set of higher-resolution
device screen pixels. The typical ratio between CSS pixels and device
pixels, available via `window.devicePixelRatio`, ranges from 1.5 to
2.

\l{Responsive Interfaces} {CSS media queries} allow
you to target images to each handset so that they scale to display at
the best possible resolution. The following example shows three
differently sized icons set to fit as a \l{Backgrounds} {background
image} within a 64-pixel-wide block. As shown in the magnified image
on the right, the quality of the assigned image increases along with
screen resolution. The media queries specified below assigns the
128-pixel icon on handsets whose `device-pixel-ratio` is 2.

```
nav:last-of-type {
    background-image     : url("img/webkit64.png");
}
@media all and (-webkit-min-device-pixel-ratio:1.5) {
    nav:last-of-type {
        background-image : url("img/webkit96.png");
    }
}
@media all and (-webkit-min-device-pixel-ratio:2) {
    nav:last-of-type {
        background-image : url("img/webkit128.png");
    }
}
```

\l{x_layout_res} {\inlineimage scr_layout_res2.png
\inlineimage scr_layout_res.png
}

\l{x_layout_res_css} {\inlineimage icon_css.png
}

Resolution-specific media queries can be used very flexibly. The
\l{The Mobile Viewport} {viewport meta tag} features a separate
`target-densitydpi` option to scale down images, but one that
_cannot_ be customized for different handsets. The following
viewport specifies that when displaying images (or other elements that
rely on pixel measurements), ignore the CSS pixel grid and instead use
the `device-dpi`. The images show a page before and after this
viewport property is applied, as it appears on a handset whose
`device-pixel-ratio` is 1.5:

```
<meta name="viewport" content="width=device-width, target-densitydpi=device-dpi" />
```

\inlineimage view_on_p.PNG
\inlineimage view_on_dpi_p.PNG
.

> __NOTE__: The `target-densitydpi` viewport property should be used with great
care. It can only be applied to entire windows, and it may affect
non-image content in unexpected ways. Since it can't be customized for
handsets with different resolutions, the feature is most appropriate
for repeating background patterns or similarly open-ended graphic
interfaces such as maps or virtual reality games.

