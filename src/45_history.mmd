/*!

\page history.html

\title Session History

Traditionally, web content was organized around the idea of traversing
links from one static page to another. Web apps are deployed much
differently: as a fixed set of files that access data dynamically,
typically via Ajax. Such an application may change its interface
dramatically from within a single web page. HTML5's History API
offers a standard way to access different application states using the
browser's familiar navigation controls.

\section2 Session History

A browser's session history is available via \c{window.history}. The
following test confirms a browser's support for the History API:

\code
var supportsHistory = !!window.history.pushState;
\endcode

The \c{history} object supports the following basic properties and
methods:

\list

\li \c{history.length}: the total number of history entries.

\li \c{history.back()} navigate backward through browser history.

\li \c{history.forward()}: navigate forward through browser history.

\li \c{history.go(n)}: jump forward in history \e{n} pages, or back
\e{-n} pages.

\endlist

\note If they are to use session history to maintain state, \l{Full-Screen Web Apps} {full-screen applications} that remove browser controls
from the screen must provide their own set of controls that call
these methods.

Applications can use the \c{pushState()} method to generate their own
custom history entries and associate data with them.

The example described below allows users to undo sets of changes to an
\l{Editable Text} {editable block of text}. The text's
\c{contenteditable} attribute allows users to edit it:

\code
<div id="historic" contenteditable="true">
Make sets of changes, then go back in history to progressively revert.
</div>
\endcode

Like form inputs, tapping on editable text regions fires a \c{focus}
event. The handler below is activated by the \c{blur} event that fires
when users tap outside the editable text:

\code
var e = 0;
document.querySelector('#historic').addEventListener('blur', newEdit);

function newEdit(event) {
    window.history.pushState(
       {text: JSON.stringify(event.target.innerHTML)}, ++e, "?edit="+e);
};
\endcode

The \c{history.pushState()} method accepts three values:

\list 1

\li the data to be retained, represented as a JSON object

\li an optional title

\li a unique same-domain URL component, in this case a filename suffix

\endlist

In this case, the data is the text that has just been edited, and the
URL component is an attribute referencing an incrementing integer.

\note The \c{history.replaceState()} method works much the same as
\c{pushState()}, but only modifies the \e{current} history entry.

Tapping the browser's control to go back to the previous page (or
corresponding application control) fires the window's \c{popstate}
event. Cached data is available via specified fields within
\c{event.state}:

\code
window.addEventListener('popstate', revertEdit);

function revertEdit(event) {
    document.querySelector('#historic').innerHTML = JSON.parse(event.state.text);
}
\endcode

The following example demonstrates an undo-able editing interface for
many different fields:

\l{x_storage_history} {\inlineimage scr_storage_history.png
}

\l{x_storage_history_css} {\inlineimage icon_css.png
}\l{x_storage_history_js} {\inlineimage icon_js.png
}

\note The example uses the browser's \l{Data Storage} {storage} to save
batches of edits, so that they are not lost if users refresh the page.
The option to clear edits clears the storage area and reloads the
original markup.

When pushing new history entries, note that transient custom URLs
generated by \c{pushState()} and \c{replaceState()} do not correspond
to any server-generated content, and thus may cause confusion when
reloaded or bookmarked as home-screen applications.

\quotation

\section2 SIDEBAR Navigational Selector

Elements within a page that are the target of navigation can receive
distinct styling using the \c{:target} dynamic class. The act of
navigating to an element can alter its appearance, or even determine
if it is to appear at all.

The following example relies on anchor navigation to display
successive rows of a table within a mobile interface:

\l{x_layout_tbl-keyhole} {\inlineimage scr_layout_tbl-keyhole.png
}

\l{x_layout_tbl-keyhole_css} {\inlineimage icon_css.png
}

While the example relies on table-related tags, they are re-styled
with block formatting to confine each row of information within the
screen. Each row features links to other rows, triggering their
display. Other links navigate away from the table, which suppresses
its display altogether. This is the main CSS driving the interface:

\code
.mobile > tbody > tr        { display : none  }
.mobile > tbody > tr:target { display : block }
\endcode

The same technique may be used to display or dismiss optional
interface elements such as panels, simply by providing navigation
links to them within the page.

\note Navigation to internal anchor links results in new
history entries along with distinct URLs that correspond to
application states. In the sample above, users may bookmark or share
individual items of interest. Otherwise for less substantial content,
consider defining your own classes. Navigating to anchors that appear
offset from the top of the screen, or horizontally off-screen, may
also abruptly shift the viewable window.

\endquotation

\section2 Navigation Within a Page

Short of generating custom history entries, a mobile web app can use
more conventional navigation techniques to control an application's
state.

The example below demonstrates how a panel implemented as an element
within a page may be hidden by default, and displayed when users
navigate to it. The \c{:target} dynamic CSS class allows elements to
be styled differently if they have been accessed via direct
navigation:

\code
<style>
#panel {
    display  : none;
}
#panel:target {
    display  : block;
    position : absolute;
    left     : 1em;
    top      : 1em;
    right    : 1em;
    bottom   : 1em;
}
</style>

<a href="#panel">Settings...</a>

<section id="panel">
    <a href="#">[X]</a>
</section>
\endcode

The following example shows an interface designed to make table rows
more accessible on smaller mobile screens, by restyling their data as
vertically stacked blocks. Rows are hidden by default, and display
only if they are the target of navigation:

\l{x_layout_tbl-keyhole} {\inlineimage scr_layout_tbl-keyhole.png
}

\l{x_layout_tbl-keyhole_css} {\inlineimage icon_css.png
}\l{x_layout_tbl-keyhole_js} {\inlineimage icon_js.png
}

Such navigation to elements within a page results in new history
entries, but can also be tracked using the window's \c{hashchange}
event. Its \c{oldURL} and \c{newURL} properties provide context for
each change in application state. The example above uses a
\c{hashchange} handler to modify the title of the page.

\note When using navigation to drive an interface in the manner described
above, each navigation results in a new history entry, which may
become annoying to users who try to step back to a prior page. But
there may also be an advantage in being able to share or save URLs
referencing specific items of interest.

\l{x_history_htm} {
  \inlineimage history.png
}

\l{x_history_htm} {
    __IFRAME__
}
\l{x_history_htm} {
    \inlineimage icon_html.png
}
\l{x_history_css} {
    \inlineimage icon_css.png
}
\l{x_history_js} {
    \inlineimage icon_js.png
}

*/

