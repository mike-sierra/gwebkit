/*!

\page av.html

\title Multimedia

\section1 XXX MT VIDEO

The Browser supports native HTML5 video playback for MPEG-4
videos. Videos can play within the browser or within \l{Web Apps} {full-screen web apps}.

To enable video, add a \c{<video>} tag to an HTML file:

\code
<video
  id		= "v"
  src		= "media/vid.mp4"
  poster	= "img/vid.png"
  width		= "72"
  height	= "72"
  type		= "video/mp4; codecs='avc1.42E01E, mp4a.40.2'"
  controls
>
</video>
\endcode

The \c{width} and \c{height} attributes can alternately be set with
CSS properties. They specify the dimensions of the preview area that,
when tapped, activates the video playback. On desktop browsers, the
video plays back within this preview area, in which case they should
be the same size. Like most other mobile browsers, the Browser plays
back videos within a separate playback panel, so video previews may
take up a much smaller part of the screen with no effect on the
quality of video playback. The \c{poster} attribute allows you to
replace the default preview image with one you supply.

This example, suitable only for mobile browsers, shows a small control
that initiates video playback:

\l{x_video_htm} {
  \inlineimage video.png
  \inlineimage video2.png
}

\l{x_video_htm} {
    __IFRAME__
}
\l{x_video_htm} {
    \inlineimage icon_html.png
}
\l{x_video_css} {
    \inlineimage icon_css.png
}

Once the video is playing, users can control or cancel playback
directly. An application can also affect playback, but not with touch
controls placed on the page, which are rendered inaccessible by the
playback panel. See \l{HTML5 Media API} for information on tools
needed to control playback for both audio and video.

The sample markup above features an optional \c{type} that associates
MIME types and video codecs, but any failure to specify it leads the
Browser to use a default codec. As an alternative to the \c{video}
tag's \c{src} attribute, nested \c{source} tags allow you to specify
videos in order of preference, with the most widely supported video
formats placed first:

\code
<video id="v" poster="img/vid.png" width="72" height="72" controls>
  <source src="vid.mp4" type="video/mp4; codecs='avc1.42E01E, mp4a.40.2'" />
  <source src="vid.ogv" type="video/ogg; codecs='theora, vorbis'" />
  <!-- fallback for browsers that do not support HTML5 video -->
</video>
\endcode

The Browser and others that support the HTML5 video standard ignore
any non-\c{source} content within the \c{video} tag. Those that do
not, interpret it. As a fallback for non-HTML5 browsers, any Flash
video implemented with the \c{object} tag can be specified as nested
content.

\section1 XXX MT AUDIO

The Browser supports the HTML5 \c{audio} tag. Place markup
such as the following HTML page, and the browser presents a set of
playback controls:

\code
<audio controls autoplay src="media/song.mp3">
    <!-- fallback content for browsers that do not support HTML5 audio -->
</audio>
\endcode

The \c{controls} attribute is necessary to present the browser's
default \c{audio} playback element. Without it, it can still produce
audio from custom interface controls using JavaScript. The
\c{autoplay} attribute causes the audio to start playing immediately
when the page loads.

\quotation

\section2 SIDEBAR: The DataSet API

Browser 8.5 supports custom data attributes, HTML5's standard mechanism to
attach local data to DOM elements. For example, here is an element
embedded with custom data:

\code
<p data-key="value">
\endcode

Data can be accessed using \c{el.dataset.key} or
\c{el.dataset['key']}, either of which serves as an alternative to the
traditional approach: \c{el.getAttribute('data-key')}.

\endquotation

\section1 Example: Playlist

This example shows a default set of playback controls, along with an
alternative touch-based playback interface that relies on the
\l{HTML5 Media API} described below. Touching any of the song titles
hides the \c{audio} element shown at the top of the first screen, and
replaces it with a custom volume control.

\if(1)

	\l{x_audio_htm} {
	  \inlineimage audio1.png
	  \inlineimage audio2.png
	}

	\l{x_audio_htm} {
	    __IFRAME__
}
\l{x_audio_htm} {
	    \inlineimage icon_html.png
	}
	\l{x_audio_css} {
	    \inlineimage icon_css.png
	}
	\l{x_audio_js} {
	    \inlineimage icon_js.png
	}

\else

	\l{x_audio_htm} {
	  \inlineimage audio1.png
	  \inlineimage audio2.png
	}

	\l{x_audio_htm} {
	    __IFRAME__
}
\l{x_audio_htm} {
	    \inlineimage icon_html.png
	}
	\l{x_audio_css} {
	    \inlineimage icon_css.png
	}
	\l{x_audio_js} {
	    \inlineimage icon_js.png
	}

\endif

\warning If more than one \c{audio} element is present on a page, they
may potentially play back at the same time.

Each of the song titles uses \l{Use Advanced CSS Formatting} {CSS
gradient formatting} to indicate progress of playback. (The 
Browser also supports the HTML5 \c{progress} tag, which may serve as
an alternative in this case.) Tapping each song title references a
new embedded filename from the hidden \c{audio} element, loads it,
then plays it:

\code
<div data-artist="El Ten Eleven" data-file="Every_Direction_Is_North"></div>

<script>
var audio = document.querySelector('audio');
var currentSong;

function play(event) {
    currentSong = event.target;
    currentSong.classList.add('playing');
    audio.src = "media/" + currentSong.dataset.file + ".mp3";
    audio.load();
    audio.play();
}
</script>
\endcode

If the song is already playing, tapping again pauses it:

\code
if (currentSong.classList.contains('playing')) {
    app.audio.pause();
    currentSong.classList.remove('playing');
    currentSong.classList.add('paused');
} else if (currentSong.classList.contains('paused')) {
    app.audio.play();
    currentSong.classList.add('playing');
    currentSong.classList.remove('paused');
}
\endcode

To represent playback state within each progress tracker, you need to
know each track's full duration. The \c{duration} property becomes
available once the audio file loads, when the \c{durationchange} event
fires on the \c{audio} element:

\code
var songDuration; // measured in seconds
audio.addEventListener('durationchange', function(e) {
    songDuration = e.target.duration;
});
\endcode

Likewise, the \c{timeupdate} event makes the current position within
the track available via the \c{currentTime} property as the media
plays:

\code
var songPosition; // measured in seconds
var progress;     // decimal value
audio.addEventListener('timeupdate', function(e) {
    songPosition = audio.currentTime;
    progress = songPosition / songDuration;
    // ...use progress to modify interface
}
\endcode

The \c{ended} event occurs as each track completes playback. In this
case, it signals the application to load and play the next track in
the playlist, if available:

\code
audio.addEventListener('ended', function(e) {
    var next;
    if (next = currentSong.nextSibling) {
        // play the next song
        return(true);
    }
    // reset interface
    return(false);
}
\endcode

The draggable slider control at the top of the screen adjusts playback
\c{volume}, a decimal value from 0 to 1:

\code
function volumeDragHandler(e) {
    if (e.touches.length > 1) return(false); // allow only 1-finger touches
    e.preventDefault(); // disable page scroll and mouse events
    e.stopPropagation(); // touch doesn't fire on background layers
    var vol = e.target; // get volume controller
    // calculate touch position:
    var dragProgress = (e.touches[0].pageX - vol.offsetLeft) /
                           vol.scrollWidth);
    audio.volume = dragProgress; // reflect in audio volume
    // modify volume slider to display new volume level here
}
\endcode

The application allows the same drag gesture to skip within each
track, by modifying the \c{currentTime} property:

\code
var dragProgress = ( (e.touches[0].pageX - currentSong.offsetLeft) /
                        currentSong.scrollWidth );
audio.currentTime = app.songDuration * dragProgress;
\endcode

\warning Mobile users are likely to skip ahead to a portion of the
song that has not yet loaded, in which case the browser may send a new
request for a different portion of the media file.

For information on how to handle touch events, see
\l{Touch Gestures}.

\section1 HTML5 Media API

The following summarizes the set of API calls available when building
your own multimedia application. By default, the \c{media} element
referenced can be either a \c{audio} and \c{video} elements. However,
the  Browser's dedicated full-screen video playback interface
prevents touch input, making API control relatively inaccessible for
video.

\section2 Methods and Properties

\list

\li \c{media.pause()} halts playback.

\li \c{media.play()} initiates playback, resumes playback if
\c{paused}, or restarts playback if \c{ended}.

\li \c{media.paused} returns \c{true} if playback has been paused.

\li \c{media.ended} returns \c{true} if playback has reached the end of
the video or audio.

\li \c{media.playbackRate} can slow down or speed up playback from the
default numeric value of 1.0 for normal speed.

\li \c{media.duration} is a read-only property that represents the
total length of the media, in seconds.

\li \c{media.currentTime} represents the current playback position, in
seconds. Assigning a new value skips to a new position within the media.

\li \c{media.played} returns a \c{TimeRanges} object representing the
portions of the video or audio that users have already played. You can
access individual timestamps from this object's \c{.start} and \c{.end}
arrays.

\li \c{media.load()} loads or reloads media specified by the \c{src}
attribute or nested \c{source} tags' \c{src} attributes. To start
playing a new media file, reference a URL for a different media file,
then run \c{load()} and \c{play()}.

\li \c{media.volume} represents playback volume as a decimal from 0 to
1.  Volume is limited by the device's overall volume setting, which
this property does not affect.

\li \c{media.muted} is a boolean property that toggles volume on and
off.

\endlist

\section2 Interactive Events

The following events that fire on the media element respond to 
various forms of user input:

\list

\li \c{play} occurs when users initiate playback using native
controls, when the application specifies the \c{play()} method, or
when a loaded \c{video} or \c{audio} element specifies an \c{autoplay}
attribute.

\li \c{timeupdate} each second the media plays.

\li \c{pause} occurs when users pause playback using native controls,
or when the application specifies the \c{pause()} method.

\li \c{ended} occurs when playback has reached the end of the media.

\li \c{ratechange} occurs when the \c{playbackRate} changes.

\li \c{volumechange} occurs when the video's volume setting has been
changed or muted.

\li \c{durationchange}: occurs after the media loads, when a new
\c{duration} value becomes available.

\endlist

\section2 Network Events

Other API events allow applications to respond to various network
states as data is buffered over a network. The following list briefly
summarizes the conditions that would fire each event:

\list

\li \c{loadstart}: browser first attempts to load data.

\li \c{progress}: browser is loading data.

\li \c{loadedmetadata}: browser has calculated the media's duration or
dimensions from the media header.

\li \c{loadeddata}: browser has loaded data and can start playing at
the current position.

\li \c{stalled}: data can't be fetched prior to completion.

\li \c{playing}: occurs when playback starts or resumes after having
been \c{stalled}.

\li \c{waiting}: playback stalls as the browser waits for more data.

\li \c{canplay}: browser estimates it has enough buffered data to
resume playback, but can't reach the end of the media before stopping
to rebuffer.

\li \c{canplaythrough}: browser estimates it can resume playback and
reach the end of the media without stopping to rebuffer.

\li \c{error}: a network error occurs while fetching data.

\li \c{abort}: browser stops fetching data, but not due to an error.

\li \c{suspend}: browser temporarily stops fetching data, but not due
to an error.

\li \c{emptied}: may occur when flushing a buffer, as when loading new
media.

\li \c{seeking}: browser is trying to recalculate which data it needs
to fetch, as may occur when the playback position changes.

\li \c{seeked}: browser has calculated which new data it needs to
fetch, and is ready to start loading.

\endlist

\section1 XXX OTHER

\section2 >>> Video

\section2 >>> Audio

\section2 >>> Flash Fallback

\section2 >>> Mobile Video Constraints

\section2 >>> Application-Controlled Multimedia

\section3 ooo Multimedia

Browser 8_5 supports browser-based HTML5 multimedia via the
\c{<video>} and \c{<audio>} tags. When touched, both videos and
audios play back within a dedicated, landscape-oriented interface
outside the specified screen layout. Other than differences in how
they are presented, \c{<video>} and \c{<audio>} tags support the same
set of features.

The following shows a simple way to specify a video:

\code
<video id="vid" width="480" height="320" src="vid.mp4" type="video/mp4; codecs='avc1.42E01E, mp4a.40.2'">
</video>
\endcode

Ordinarily, the \c{height} and \c{width} attributes (or corresponding
CSS) would determine the dimensions of the video, but the dedicated
playback interface allows you to size them to smaller icons, specified
with the \c{poster} attribute, used to trigger this mode:

\code
<video id="vid" width="72" height="72" poster="vid.png" src="vid.mp4" type="video/mp4; codecs='avc1.42E01E, mp4a.40.2'">
</video>
\endcode

The \c{controls} attribute has no effect on how the video playback
interface appears in Browser 8_5.

Use the \c{source} tag to specify a list of available alternative file
formats, in order of preference:

\code
<video id="vid" width="480" height="320" preload loop>
  <source src="vid.mp4" type="video/mp4; codecs='avc1.42E01E, mp4a.40.2'" />
  <source src="vid.ogv" type="video/ogg; codecs='theora, vorbis'" />
</video>
\endcode

\note To extend video support to non-HTML5 browsers, you can
nest additional markup within the \c{video} element to specify
\l{http://www.developer.nokia.com/Resources/Library/Web/nokia-browsers/common-elements-of-nokia-browsers/media-and-plug-ins/audio-and-video-on-nokia-devices.html}
{Flash video as a fallback}.

The \c{preload} attribute forces the media file to cache before it is
played; otherwise specifying \c{autoplay} plays it immediately. The
\c{loop} attribute plays the video continuously. The \c{type}
attribute specifies pairings of MIME encodings and media codecs.
The following \c{type} attribute values are supported:

\list

\li \c{video/mp4; codecs="avc1.42E01E, mp4a.40.2"}

\li \c{video/webm; codecs="vp8, vorbis"}

\li \c{video/ogg; codecs="theora, vorbis"}

\endlist

Browser 8_5 supports MP3, AAC, PCM, and Ogg Vorbis audio file formats.

Browser 8_5 supports HTML5's Media API, which consists of methods
called on, or events fired on \c{video} or \c{audio} elements:

\list

\li Methods: \c{pause()}, \c{play()}, \c{load()}

\li State and configuration values: \c{paused}, \c{ended}, \c{played},
\c{playbackRate}, \c{volume}, and \c{muted}

\li Playback events: \c{play}, \c{pause}, \c{ended}, \c{ratechange},
\c{volumechange}

\li Network State Events: \c{abort}, \c{canplay}, \c{canplaythrough},
\c{emptied}, \c{error}, \c{loadeddata}, \c{loadedmetadata},
\c{loadstart}, \c{playing}, \c{progress}, \c{seeked}, \c{seeking},
\c{stalled}, \c{suspend}, \c{timeupdate}, \c{waiting}

\endlist

\note On-screen controls that might affect media playback are
unavailable while the media's playback interface displays. Exiting
the playback mode requires explicit input from the user, and cannot be
controlled via the Media API.

\section3 ooo Multimedia API Reference

You can call the following API functions or properties directly on
\c{video} and \c{audio} elements to control multimedia content within
your application:

\list

\li \c{media.pause()} halts playback.

\li \c{media.play()} initiates playback, resumes playback if
\c{paused}, or restarts playback if \c{ended}.

\li \c{media.paused} returns \c{true} if playback has been paused.

\li \c{media.ended} returns \c{true} if playback has reached the end of
the video or audio.

\li You can set \c{media.playbackRate} to slow down or speed up
playback. By default the value is \c{1.0} for normal speed.

\li \c{media.played} returns a \c{TimeRanges} object representing the
portions of the video or audio that users have played. You can access
individual timestamps from the object\'s \c{.start} and \c{.end}
arrays.

\li \c{media.load()} loads or reloads media specified by the \c{src}
attribute or nested \c{source} tags' \c{src} attributes. Change the
media files specified by these URLs, then run \c{load()} and
\c{play()} to start playing a new media file.

\endlist

The HTML5 Multimedia API introduces numerous specialized events. The
following events, called from \c{video} or \c{audio} elements, may
respond to user input:

\list

\li \c{play} occurs when users initiate playback, when the application
specifies the \c{play()} method, or when a loaded \c{video} or
\c{audio} element specifies an \c{autoplay} attribute.

\li \c{pause} occurs when users pause playback or when the application
specifies the \c{pause()} method.

\li \c{ended} occurs when playback has reached the end of the media.

\li \c{ratechange} occurs when the \c{playbackRate} changes.

\li \c{volumechange} occurs when the video\'s volume setting has been
changed. (This setting is different than the handset\'s volume
setting.)

\endlist

Numerous other low-level events allow applications to respond to
detailed sets of network states as data is buffered. The following list
briefly summarizes the conditions that would fire each event:

\list

\li \c{loadstart}: browser first attempts to load data

\li \c{progress}: browser is loading data

\li \c{loadedmetadata}: browser has calculated duration or dimensions
from media header

\li \c{loadeddata}: browser has loaded data and can start playing at
the current position

\li \c{playing}: playback has started or resumed

\li \c{timeupdate}: the current playback position has been changed

\li \c{stalled}: data can't be fetched prior to completion

\li \c{waiting}: playback stalls as the browser waits for more data

\li \c{canplay}: browser estimates it has enough buffered data to
resume playback, but can't reach the end of the media before stopping
to rebuffer.

\li \c{canplaythrough}: browser estimates it can resume playback and
reach the end of the media without stopping to rebuffer.

\li \c{error}: a network error occurs while fetching data

\li \c{abort}: browser stops fetching data, but not due to an error

\li \c{suspend}: browser temporarily stops fetching data, but not due
to an error

\li \c{emptied}: may occur when flushing a buffer, as when loading new
media

\li \c{seeking}: browser is trying to recalculate which data it needs
to fetch, as when the playback position changes

\li \c{seeked}: browser has calculated which new data it needs to
fetch, and is ready to start loading

\endlist

\b{See Also:}

\list

\li \l{http://www.w3.org/TR/html5/video.html} {W3C: HTML5 Media Elements}

\li \l{http://developer.apple.com/library/safari/#documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009523-CH1-SW1} {Apple: Safari HTML5 Audio and Video Guide}

\endlist

\section3 ooo HTML5 Audio

The HTML5 \c{audio} tag works very much like the \c{video} tag, and
supports the same set of attributes:

\code
<audio id="audioplayer" controls loop autoplay>
   <source src="myAudio.mp3"/>
   <source src="myAudio.wav"/>
   <source src="myAudio.ogg"/>
</audio>
\endcode

By default, audios present a playback interface:

\image av_audio.png

To make an audio play in the background, sets its \c{autoplay}
attribute and use CSS to hide the playback controls:

\code
audio { display: none }
\endcode

As with video, the \c{audio} region can feature nested fallback content
that plays on browsers that don\'t support HTML5 multimedia:

\code
<audio id="audioplayer" preload controls loop>
   <source src="myAudio.mp3"/>
   <source src="myAudio.wav"/>
   <source src="myAudio.ogg"/>
   <embed
     type              = "application/x-shockwave-flash"
     src               = "http://www.google.com/reader/ui/3247397568-audio-player.swf?audioUrl= myAudio.mp3";
     width             = "200"
     height            = "27"
     allowscriptaccess = "never"
     quality           = "best"
     bgcolor           = "#ffffff"
     wmode             = "window"
     flashvars         = "playerMode=embedded"
   />
</audio>
\endcode

The following example demonstrates a simple playback interface that
loads data from each selected track into a common, hidden audio
player:

\l{x_av_audio} {\inlineimage scr_av_audio.png
}

\l{x_av_audio_css} {\inlineimage icon_css.png
}\l{x_av_audio_js} {\inlineimage icon_js.png
}

It relies on three Multimedia API calls: \c{play()}, \c{pause()}, and
\c{load()} to restart from the beginning of an audio track. To select
new audio tracks, it modifies the audio player's \c{src} attribute.

\section3 ooo HTML5 Video

You can embed videos directly on a web page using the HTML5 \c{video}
tag. The following example shows how to specify a set of alternative
video files with which to target the widest range of browsers:

\code
<video id="myVideo" width="480" height="320" preload controls loop>
  <source src="lo_myVideo.mp4" type="video/mp4; codecs='avc1.42E01E, mp4a.40.2'" />
  <source src="lo_myVideo.webm" type="video/webm; codecs='vp8, vorbis'" />
  <source src="lo_myVideo.ogv" type="video/ogg; codecs='theora, vorbis'" />
</video>
\endcode

The \c{video} tag can contain any number of nested \c{source} tags to
specify alternative video files in various media formats, along with
associated mime types and codecs that help browsers determine support.
Arrange in order of preference, with the most likely match placed
first. Browsers do not display an error if none of these files or
codecs are available, so make sure to provide a suitable range of
alternatives.

Various \c{video} tag attributes allow control over how the video
performs:

\list

\li \c{preload} makes the browser immediately cache the video file to
avoid potential delays in playback.

\li \c{autoplay}, not shown in the above example, causes the video to
play immediately once the page loads.

\li \c{loop} repeats video playback indefinitely.

\li \c{controls} presents a control bar allowing users to pause and
skip to any point within the video.

\li \c{poster} allows you to fill the video area with an alternate
preview image. (If not specified, the video area displays a random
video frame.)

\li The \c{height} and \c{width} attributes specify a fixed container
in which the video displays.

\endlist

Like images, the inherent dimensions of videos should be reflected in
the \c{video} tag\'s \c{height} and \c{width} attributes. Otherwise,
consistently sized sets of videos can be sized within CSS:

\code
video { height: 320; width: 432; }
\endcode

\note Preloaded videos are downloaded even if they are hidden using CSS's
\c{display:none} property. Likewise if you were to apply CSS to hide a
video element after playback starts, you can still hear the audio.

Videos are best viewed at their actual size, since scaling them down
may lead to performance degradation and visual artifacts. To display
landscape-oriented video on the widest range of touch-based browsers,
specify a maximum \c{width} of 480 and a \c{height} of 320.

Note that the \c{autoplay} attribute renders the \c{preload} attribute
unnecessary. Since \c{autoplay} causes the video to play immediately
when the page loads, there is no time prior to playback for the data
to start loading into a buffer.

The following demonstrates how a video appears by default, with the
\c{controls} attribute specified:

\l{x_av_video-default} {\inlineimage scr_av_video-default.png
}

To allow users to initiate video playback in desktop browsers, you
must specify the \c{controls} attribute. Otherwise, unless you specify
\c{autoplay} or implement your own playback controls, users would
simply see the preview image with no way to start the video.

Note that each video tag that appears on a page behaves independently
of others, so there is nothing by default to prevent you from playing
more than one video at a time. For information on implementing your
own playback controls, see \l{HTML5 Media API}. For an example of an
audio player that loads in different media files to prevent
simultaneous playback, see \l{Audio}. For information on how mobile
browsers present videos differently, see \l{Video}.

\section3 ooo Application-Controlled Video

Specifying the \c{video} tag\'s \c{controls} attribute gives users
full control to pause or replay a video, or to skip to any point
within the video. However, you may want to implement your own playback
controls outside the video's playback region, or to control playback
programmatically in other ways. HTML5's Multimedia API allows you to
do so.

\note As discussed in the \l{Video}, mobile browsers present videos in a
separate full-screen playback interface that renders the overall HTML
page inaccessible. Since mobile users may not be able to interact
with page elements while the video is playing back, the Multimedia API
may be most relevant for desktop browsers when applied to videos.

The following uses the Multimedia API to implement a simple control
switching between pause and play states. In this case, an image is
made clickable:

\code
<img src="img/video_play.png" onclick="play_pause()"/>
\endcode

The \c{play_pause} function makes API calls directly on the \c{video}
tag:

\code
var v = document.getElementById("vid");

function play_pause() {
    if ( ! v.paused && ! v.ended ) {
        v.pause();
        this.src = 'img/video_play.png';
    }
    else {
        v.play();
        this.src = 'img/video_pause.png';
    }
}
\endcode

Applications can also respond to multimedia-specific events that fire
on the \c{video} element. The following example uses the \c{ended}
event to display a list of related videos:

\code
document.querySelector("video").addEventListener("ended", function(){
    document.getElementById("other_videos").className = "visible";
})
\endcode

See the \l{HTML5 Media API} section for information on how to
load in different videos, and other tools necessary to craft your own
multimedia interface.

\b{See Also}:
\l{http://dev.opera.com/articles/view/everything-you-need-to-know-about-html5-video-and-audio/} {dev.opera:
Everything you need to know about HTML5 video and audio}

\section3 ooo Adding Flash Fallback

Browsers that do not support HTML5 video ignore the \c{video} tag and
its nested \c{source} tags, but interpret any other nested markup they
recognize as valid. This allows you to specify Flash video as a
fallback option. The following sample provides an all-purpose approach
to deploy both HTML5- and Flash-based video:

\code
<video id="myVideo" width="360" height="240" preload controls>
  <source src="lo_myVideo.mp4" type="video/mp4; codecs='avc1.42E01E, mp4a.40.2'" />
  <source src="lo_myVideo.webm" type="video/webm; codecs='vp8, vorbis'" />
  <source src="lo_myVideo.ogv" type="video/ogg; codecs='theora, vorbis'" />
  <object width="320" height="240" type="application/x-shockwave-flash" data="lo_myVideo.swf">
    <param name="movie" value="video.swf" />
    <param name="quality" value="high" />
    <param name="allowfullscreen" value="true" />
    <param name="bgcolor" value="#ffffff" />
    <param name="play" value="true" />
    <param name="loop" value="true" />
    <param name="scale" value="showall" />
    <param name="devicefont" value="false" />
    <param name="salign" value="" />
    <param name="allowScriptAccess" value="sameDomain" />
    <p>Download video as <a href="lo_myVideo.mp4">MP4</a>, <a href="lo_myVideo.webm">WebM</a>, or <a href="lo_myVideo.ogv">Ogg</a>.</p>
  </object>
</video>
\endcode

This example also provides a fallback message for any browser that
doesn\'t support either HTML5 or Flash video. Note that these
fallbacks do \e{not} apply if the browser supports the video delivery
mechanism, but the data or codecs are simply unavailable.

\section3 ooo Targeting Video to Mobile Browsers

Most mobile browsers present their own playback interfaces. Unlike
desktop browsers, these videos do not play back HTML5 video in
\e{inline} mode within the context of the page layout. This allows
mobile application designers considerable flexibility in presenting
controls that initiate video playback. Rather than presenting video
previews at the same size as the videos themselves, you can present
less obtrusive icons within a smaller screen layout.

The following demonstrates a \c{video} element that is sized as a
64-pixel square within a mobile interface:

\l{x_av_video} {\inlineimage scr_av_video.png
}

The \c{video} element specifies an alternate \c{poster} image that
serves as a preview prior to playback, after which the current video
frame may display when the video is paused:

\code
<video id="myVideo" width="64" height="64" controls poster="img/video.png">
\endcode

Tapping the icon with a mobile browser opens a separate full-screen
video playback interface, which users can leave by pausing the video.
Note, however, that desktop browsers do \e{not} display the above
screen layout as intended, since they attempt to fit video playback
\c{control} elements, as well as the video itself, within the tiny box
reserved for the icon:

\image scr_av_video-bad.png

Thus, if you want to use the icon-triggered videos described above
within a hybrid desktop/mobile site, you should use CSS media queries
to specify different video dimensions for each interface:

\code
video { width: 480; width: 320; }      ((default video playback size))
@media only screen and (max-device-width: 480px) {
    video { width: 64; width: 64; }    ((mobile video playback))
}
\endcode

Specifying \c{height} and \c{width} as CSS means you don't have to
specify them as attributes to the \c{video} tag. See \l{Responsive Interfaces} for information on how to use CSS to deploy hybrid
desktop/mobile sites.

The example above uses the same set of media files for both desktop
and mobile interfaces, but hybrid sites may require much larger videos
for desktop presentation. Sending such a large video to a mobile
browser would be inefficient, because of lower bandwidth and the
smaller mobile screen. In this case, it is best to target a separate
set of low-resolution videos to mobile browsers.

The following example uses the technique outlined in the section on
\l{Script-based Adaptation} to assign properly sized videos to each
interface. By default, video filenames are prefixed \e{lo_}. If the
page is being viewed with a desktop browser, the prefix changes to
\e{hi_}:

\code
window.onload = function() {
    var vid = document.getElementById("vid");
    var sources = vid.querySelectorAll("source");
    if ( isDesign("desktop") ) {
        for (i = 0, l = sources.length; i < l ; i++ ) {
            sources[i].src = sources[i].src.replace(/lo_/, "hi_");
        }
        vid.setAttribute('width', 720);
        vid.setAttribute('height', 480);
        vid.setAttribute('preload', 'preload');
    }
};
\endcode

In this example, the video's screen dimensions are boosted, but these
can also be controlled using CSS media queries as described above.
This example also sets the \c{preload} attribute specifically for
desktop browsers, which usually enjoy higher bandwidth.

\section3 ooo intro

WebKit supports HTML5 multimedia, which offers a common open Web
standard and an alternative to proprietary technologies such as Flash.
This section outlines how to specify multimedia using uniform markup
conventions that address both HTML5- and Flash-capable browsers. It
also discusses how best to present them to mobile users.

When offering multimedia, mobile web developers need to consider the
greater bandwidth it requires. You should avoid including multimedia
for any content users don\'t specifically request, such as
advertisements. You should likewise be careful when the multimedia
content is somewhat relevant, but optional. For example, if a news
item features a related video, it may be best to place it on a
separate page, or else prevent it from loading unless users
specifically request it. Preloading or automatically playing media
files is inappropriate for pages that contain non-media content that
may interest users more. For those on slow or unreliable data
networks, navigation items should make the likelihood of downloading
multimedia items unambiguous.

Web designs also need to account for variation in how videos are
presented. Desktop browsers play back videos in \e{inline} format,
embedded within the context of the web page's layout. Most mobile
browsers present videos within a dedicated, landscape-oriented
playback interface. Mobile users thus may not always have access to
nearby controls, such as rating bars or comment forms, that invite
feedback while a video is playing.

\section3 ooo intro2

QtWebKit-based browsers support HTML5 standards-based audio and video
playback. Many other browsers that support multimedia instead rely on
Flash. This chapter tells you how to specify multimedia using uniform
markup conventions that address each class of browser, and how best to
present them to mobile users.

When offering multimedia, mobile web developers first need to consider
the greater bandwidth it requires. You should avoid including
multimedia for any content users don\'t specifically request, such as
advertisements. You should likewise be careful when the multimedia
content is relevant, but optional. For example, if a news item
features a related video, it may be best to place it on a separate
page, or else prevent it from loading unless users specifically
request it. Preloaded videos are only appropriate when they represent
the page\'s primary content. Likewise, media that automatically plays
when the page loads is only appropriate when the page features no
other content users might pursue, and if the navigation to that page
makes the presence of multimedia unambiguous.

Web designs also need to account for variation in how videos are
presented. Desktop browsers play back videos in \e{inline} format,
embedded within the web page layout. Some mobile browsers present
videos within a dedicated, landscape-oriented playback interface.
Mobile users thus may not always have access to nearby controls, such
as rating bars or comment forms, that invite feedback while a video is
playing.

\b{See Also}:

\list

\li \l{http://www.codeblog.co/getting-autoplay-working-on-ios/} {Getting Autoplay Working on iOS}

\li \l{http://diveintohtml5.org/video.html} {Dive Into HTML5: Feature Detection}

\endlist

\list

\li inline poster attr

\li full-screen playback

\li source tags & codecs

\li Flash fallback

\li No preload, autoplay, loop, controls

\li Controlling playback

\li captions

\endlist

*/

